generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Guild {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discordId   String      @unique @map("discord_id")
  coins       Int         @default(0) @map("coins")
  glory       Int         @default(0) @map("glory")
  level       Int         @default(1) @map("level")
  name        String?     @map("name")
  description String?     @map("description")
  icon        String?     @map("icon")
  xp          Int         @default(0) @map("xp")
  npcs        Int         @default(0) @map("npcs")
  npcsMax     Int         @default(1) @map("npcs_max")
  itens       Item[]
  maxItens    Int         @default(1) @map("max_itens")
  heroes      Hero[]
  parties     Party[]
  adventures  Adventure[]
}

// insert, update, delete admin only
model Item {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String @map("name")
  type     String @map("type")
  rarity   String @map("rarity")
  icon     String @map("icon")
  quantity Int    @default(1) @map("quantity")
  guildId  String @map("guild_id") @db.Uuid
  guild    Guild[]
  heroId   String @map("hero_id") @db.Uuid
  hero     Hero[]
}

model Hero {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @map("name")
  xp          Int     @default(0) @map("xp")
  level       Int     @default(1) @map("level")
  skillPoints Int     @default(0) @map("skill_points")
  strength    Int     @default(1) @map("strength")
  agility     Int     @default(1) @map("agility")
  intellect   Int     @default(1) @map("intellect")
  vitality    Int     @default(1) @map("vitality")
  luck        Int     @default(1) @map("luck")
  available   Boolean @default(true) @map("available")
  guildId     String  @map("guild_id") @db.Uuid
  guild       Guild   @relation(fields: [guildId], references: [id])
  itens       Item[]
  party       Party[]
}

model Party {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  heroes     Hero[]
  adventures Adventure[]
  guildId    String      @map("guild_id") @db.Uuid
  guild      Guild       @relation(fields: [guildId], references: [id])
}

model Adventure {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  finishedAt DateTime? @map("finished_at")
  guildId    String    @map("guild_id") @db.Uuid
  guild      Guild     @relation(fields: [guildId], references: [id])
  partyId    String    @map("party_id") @db.Uuid
  party      Party     @relation(fields: [partyId], references: [id])
}
